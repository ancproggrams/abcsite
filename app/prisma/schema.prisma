generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/abcsite_replica/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  phone     String?
  message   String
  formType  String   @default("general")
  interest  String?
  createdAt DateTime @default(now())

  @@map("contacts")
}

model BlogPost {
  id              String         @id @default(cuid())
  title           String
  slug            String         @unique
  excerpt         String
  content         String
  featuredImage   String?
  status          PostStatus     @default(DRAFT)
  authorName      String         @default("Marc Ren√©")
  authorEmail     String         @default("marc@adviesnconsultancy.nl")
  publishedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  metaTitle       String?
  metaDescription String?
  keywords        String?
  viewCount       Int            @default(0)
  shareCount      Int            @default(0)
  categories      BlogCategory[] @relation("BlogCategoryToBlogPost")
  tags            BlogTag[]      @relation("BlogPostToBlogTag")

  @@map("blog_posts")
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String     @default("#60B5FF")
  createdAt   DateTime   @default(now())
  posts       BlogPost[] @relation("BlogCategoryToBlogPost")

  @@map("blog_categories")
}

model BlogTag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  posts     BlogPost[] @relation("BlogPostToBlogTag")

  @@map("blog_tags")
}

model DownloadResource {
  id            String   @id @default(cuid())
  title         String
  description   String
  category      String
  type          String
  fileUrl       String
  fileName      String
  fileSize      Int?
  downloadCount Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("download_resources")
}

model CaseStudy {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  industry    String
  challenge   String
  solution    String
  result      String
  duration    String
  imageUrl    String?
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("case_studies")
}

model QuickScanResult {
  id                    String   @id @default(cuid())
  name                  String
  email                 String
  company               String
  phone                 String?
  position              String?
  hasBcmOfficer         Boolean
  hasCrisisTeam         Boolean
  responses             Json
  contextScore          Int
  leadershipScore       Int
  planningScore         Int
  supportScore          Int
  operationScore        Int
  performanceScore      Int
  improvementScore      Int
  overallScore          Int
  maturityLevel         String
  reportGenerated       Boolean  @default(false)
  reportUrl             String?
  wantsConsultation     Boolean  @default(false)
  consultationScheduled Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("quick_scan_results")
}

model NewsletterSubscriber {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  company        String?
  isActive       Boolean   @default(true)
  preferences    String[]
  source         String?
  leadScore      Int       @default(0)
  lastEngagement DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("newsletter_subscribers")
}

model SocialMediaPost {
  id          String         @id @default(cuid())
  platform    SocialPlatform
  postId      String
  content     String
  url         String
  imageUrl    String?
  publishedAt DateTime
  engagements Int            @default(0)
  createdAt   DateTime       @default(now())

  @@unique([platform, postId])
  @@map("social_media_posts")
}

model ChatConversation {
  id          String        @id @default(cuid())
  sessionId   String        @unique
  userEmail   String?
  userName    String?
  userCompany String?
  userPhone   String?
  leadScore   Int           @default(0)
  status      ChatStatus    @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  messages    ChatMessage[]

  @@map("chat_conversations")
}

model ChatMessage {
  id             String           @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  metadata       Json?
  createdAt      DateTime         @default(now())
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model ChatbotConfig {
  id                       String   @id @default(cuid())
  name                     String   @unique
  welcomeMessage           String
  fallbackMessage          String
  leadQualificationEnabled Boolean  @default(true)
  autoResponseEnabled      Boolean  @default(true)
  businessHours            Json
  isActive                 Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@map("chatbot_config")
}

model CrmContact {
  id             String        @id @default(cuid())
  hubspotId      String?       @unique
  email          String        @unique
  firstName      String
  lastName       String
  company        String?
  phone          String?
  jobTitle       String?
  leadScore      Int           @default(0)
  lifecycleStage String?
  leadSource     String?
  lastActivity   DateTime?
  isActive       Boolean       @default(true)
  syncedAt       DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  activities     CrmActivity[]

  @@map("crm_contacts")
}

model CrmActivity {
  id          String     @id @default(cuid())
  contactId   String
  type        String
  subject     String
  description String?
  outcome     String?
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  contact     CrmContact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("crm_activities")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  sessionId String
  eventType String
  eventData Json
  userAgent String?
  ipAddress String?
  referrer  String?
  page      String?
  userId    String?
  timestamp DateTime @default(now())

  @@map("analytics_events")
}

model ConversionMetrics {
  id                   String   @id @default(cuid())
  date                 DateTime @unique @db.Date
  pageViews            Int      @default(0)
  uniqueVisitors       Int      @default(0)
  contactForms         Int      @default(0)
  quickScans           Int      @default(0)
  newsletterSignups    Int      @default(0)
  consultationBookings Int      @default(0)
  conversionRate       Float    @default(0.0)

  @@map("conversion_metrics")
}

model FaqCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  faqs        Faq[]

  @@map("faq_categories")
}

model Faq {
  id         String      @id @default(cuid())
  categoryId String
  question   String
  answer     String
  order      Int         @default(0)
  isActive   Boolean     @default(true)
  viewCount  Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  category   FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("faqs")
}

model TeamMember {
  id          String   @id @default(cuid())
  name        String
  position    String
  bio         String
  imageUrl    String?
  email       String?
  phone       String?
  linkedinUrl String?
  expertise   String[]
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("team_members")
}

model Customer {
  id             String             @id @default(cuid())
  email          String             @unique
  name           String
  company        String
  phone          String?
  hashedPassword String
  isActive       Boolean            @default(true)
  lastLogin      DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  documents      CustomerDocument[]
  projects       CustomerProject[]

  @@map("customers")
}

model CustomerProject {
  id          String             @id @default(cuid())
  customerId  String
  name        String
  description String?
  status      ProjectStatus      @default(ACTIVE)
  progress    Int                @default(0)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  documents   CustomerDocument[]
  customer    Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_projects")
}

model CustomerDocument {
  id             String           @id @default(cuid())
  customerId     String
  projectId      String?
  title          String
  description    String?
  fileName       String
  fileUrl        String
  fileSize       Int?
  mimeType       String?
  isConfidential Boolean          @default(false)
  uploadedAt     DateTime         @default(now())
  customer       Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  project        CustomerProject? @relation(fields: [projectId], references: [id])

  @@map("customer_documents")
}

// Admin System Models
model Admin {
  id             String      @id @default(cuid())
  email          String      @unique
  name           String
  hashedPassword String
  role           AdminRole   @default(ADMIN)
  isActive       Boolean     @default(true)
  lastLogin      DateTime?
  failedLogins   Int         @default(0)
  lockoutUntil   DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  createdBy      String?
  sessions       Session[]
  accounts       Account[]

  @@map("admins")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              Admin   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Admin    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Admin Activity Log
model AdminActivityLog {
  id        String   @id @default(cuid())
  adminId   String
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("admin_activity_logs")
}

// ==== WEEK 2 SECURITY MODELS ====

// API Key Management System
model ApiKey {
  id          String       @id @default(cuid())
  name        String
  key         String       @unique
  hashedKey   String
  adminId     String
  permissions String[]     // Array of permissions like ['read:blog', 'write:contact']
  rateLimit   Int          @default(1000) // Per hour
  isActive    Boolean      @default(true)
  lastUsed    DateTime?
  usageCount  Int          @default(0)
  expiresAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  apiUsage    ApiUsage[]

  @@map("api_keys")
}

// API Usage Tracking
model ApiUsage {
  id        String   @id @default(cuid())
  apiKeyId  String
  endpoint  String
  method    String
  ipAddress String
  userAgent String?
  status    Int
  duration  Int      // Response time in milliseconds
  timestamp DateTime @default(now())
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@index([apiKeyId, timestamp])
  @@map("api_usage")
}

// Enhanced Session Management
model SessionActivity {
  id           String   @id @default(cuid())
  sessionToken String
  adminId      String
  activity     String   // 'login', 'logout', 'api_call', 'page_view', 'suspicious'
  ipAddress    String
  userAgent    String
  location     String?  // Derived from IP
  isSuccessful Boolean  @default(true)
  metadata     Json?
  timestamp    DateTime @default(now())

  @@index([sessionToken])
  @@index([adminId, timestamp])
  @@map("session_activities")
}

// Concurrent Session Management
model ActiveSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  adminId      String
  ipAddress    String
  userAgent    String
  lastActivity DateTime @default(now())
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())

  @@index([adminId])
  @@map("active_sessions")
}

// Security Event Logging
model SecurityEvent {
  id          String            @id @default(cuid())
  type        SecurityEventType
  severity    SecuritySeverity
  title       String
  description String
  source      String            // 'middleware', 'api', 'auth', etc.
  adminId     String?
  sessionId   String?
  ipAddress   String
  userAgent   String?
  metadata    Json?
  resolved    Boolean           @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime          @default(now())

  @@index([type, severity])
  @@index([createdAt])
  @@map("security_events")
}

// File Upload Validation & Scanning
model FileUpload {
  id           String           @id @default(cuid())
  fileName     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  checksum     String           // SHA-256 hash
  uploadedBy   String           // Admin ID
  scanStatus   FileScanStatus   @default(PENDING)
  scanResult   Json?            // Virus scan, content analysis results
  isQuarantine Boolean          @default(false)
  uploadedAt   DateTime         @default(now())
  scannedAt    DateTime?

  @@map("file_uploads")
}

// Data Retention Policy Management
model DataRetentionPolicy {
  id          String   @id @default(cuid())
  dataType    String   // 'contact', 'analytics', 'logs', etc.
  retentionDays Int    // How many days to keep
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([dataType])
  @@map("data_retention_policies")
}

// GDPR Compliance
model DataProcessingRequest {
  id          String                    @id @default(cuid())
  email       String
  requestType DataProcessingRequestType
  status      RequestStatus            @default(PENDING)
  requestData Json?                    // What data was requested
  responseData Json?                   // What data was provided/deleted
  processedBy String?                  // Admin ID
  processedAt DateTime?
  createdAt   DateTime                 @default(now())

  @@map("data_processing_requests")
}

// Consent Management
model ConsentRecord {
  id            String   @id @default(cuid())
  email         String
  consentType   String   // 'marketing', 'analytics', 'functional'
  hasConsent    Boolean
  consentSource String   // 'form', 'cookie_banner', 'email'
  ipAddress     String
  userAgent     String?
  withdrawnAt   DateTime?
  createdAt     DateTime @default(now())

  @@index([email, consentType])
  @@map("consent_records")
}

// API Health Monitoring
model ApiHealthCheck {
  id           String   @id @default(cuid())
  endpoint     String
  method       String
  status       Int
  responseTime Int      // milliseconds
  error        String?
  checkedAt    DateTime @default(now())

  @@index([endpoint, checkedAt])
  @@map("api_health_checks")
}

// Real-time Alerting
model SecurityAlert {
  id          String       @id @default(cuid())
  type        String       // 'rate_limit_exceeded', 'suspicious_activity', 'failed_login_attempts'
  severity    SecuritySeverity
  title       String
  message     String
  metadata    Json?
  triggered   Boolean      @default(false)
  acknowledged Boolean    @default(false)
  acknowledgedBy String?
  acknowledgedAt DateTime?
  createdAt   DateTime     @default(now())

  @@index([severity, triggered])
  @@map("security_alerts")
}

// Enhanced Admin model for Week 2
model AdminSecurityPreference {
  id                        String   @id @default(cuid())
  adminId                   String   @unique
  maxConcurrentSessions     Int      @default(3)
  sessionTimeoutMinutes     Int      @default(120)
  requireTwoFactor          Boolean  @default(false)
  allowedIpRanges           String[] // CIDR notation
  securityNotifications     Boolean  @default(true)
  lastSecurityReview        DateTime?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("admin_security_preferences")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  VIEWER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SocialPlatform {
  LINKEDIN
  TWITTER
  FACEBOOK
}

enum ChatStatus {
  ACTIVE
  QUALIFIED
  CONVERTED
  ARCHIVED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

// ==== WEEK 2 SECURITY ENUMS ====

enum SecurityEventType {
  AUTHENTICATION_FAILURE
  RATE_LIMIT_EXCEEDED
  SUSPICIOUS_ACTIVITY
  UNAUTHORIZED_ACCESS
  MALICIOUS_REQUEST
  SESSION_HIJACKING
  BRUTE_FORCE_ATTACK
  SQL_INJECTION_ATTEMPT
  XSS_ATTEMPT
  CSRF_ATTEMPT
  FILE_UPLOAD_THREAT
  API_ABUSE
  PRIVILEGE_ESCALATION
  DATA_BREACH_ATTEMPT
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FileScanStatus {
  PENDING
  SCANNING
  SAFE
  THREAT_DETECTED
  QUARANTINED
  SCAN_FAILED
}

enum DataProcessingRequestType {
  ACCESS_REQUEST
  DELETION_REQUEST
  RECTIFICATION_REQUEST
  PORTABILITY_REQUEST
  RESTRICTION_REQUEST
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
}
