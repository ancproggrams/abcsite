
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/abcsite_replica/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  phone     String?
  message   String
  formType  String   @default("general")
  interest  String?
  createdAt DateTime @default(now())
  
  @@map("contacts")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String
  featuredImage String?
  status      PostStatus @default(DRAFT)
  authorName  String   @default("Marc Ren√©")
  authorEmail String   @default("marc@adviesnconsultancy.nl")
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  keywords        String?
  
  // Relationships
  categories      BlogCategory[]
  tags            BlogTag[]
  
  // Analytics
  viewCount       Int @default(0)
  shareCount      Int @default(0)
  
  @@map("blog_posts")
}

model BlogCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String   @default("#60B5FF")
  createdAt   DateTime @default(now())
  
  posts       BlogPost[]
  
  @@map("blog_categories")
}

model BlogTag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  
  posts     BlogPost[]
  
  @@map("blog_tags")
}

model DownloadResource {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  type        String   // PDF, Excel, PowerBI, etc.
  fileUrl     String
  fileName    String
  fileSize    Int?     // in bytes
  downloadCount Int    @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("download_resources")
}

model CaseStudy {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  industry    String
  challenge   String
  solution    String
  result      String
  duration    String
  imageUrl    String?
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("case_studies")
}

model QuickScanResult {
  id              String   @id @default(cuid())
  // User info
  name            String
  email           String
  company         String
  phone           String?
  position        String?
  
  // BCM specific questions
  hasBcmOfficer   Boolean  // Required question
  hasCrisisTeam   Boolean  // Required question
  
  // ISO 22301 questionnaire responses (JSON)
  responses       Json     // Array of {questionId, score, area}
  
  // Calculated scores per control area
  contextScore           Int    // 1-5
  leadershipScore        Int    // 1-5
  planningScore          Int    // 1-5
  supportScore           Int    // 1-5
  operationScore         Int    // 1-5
  performanceScore       Int    // 1-5
  improvementScore       Int    // 1-5
  
  // Overall assessment
  overallScore           Int    // 1-5
  maturityLevel          String // Basic, Developing, Advanced, Expert
  
  // Report generation
  reportGenerated        Boolean @default(false)
  reportUrl              String?
  
  // Follow-up
  wantsConsultation      Boolean @default(false)
  consultationScheduled  Boolean @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("quick_scan_results")
}

model NewsletterSubscriber {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  company         String?
  isActive        Boolean  @default(true)
  preferences     String[] // JSON array of preferences
  source          String?  // Where they signed up from
  leadScore       Int      @default(0)
  lastEngagement  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("newsletter_subscribers")
}

model SocialMediaPost {
  id           String   @id @default(cuid())
  platform     SocialPlatform
  postId       String   // External post ID
  content      String
  url          String
  imageUrl     String?
  publishedAt  DateTime
  engagements  Int      @default(0)
  createdAt    DateTime @default(now())
  
  @@unique([platform, postId])
  @@map("social_media_posts")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SocialPlatform {
  LINKEDIN
  TWITTER
  FACEBOOK
}

// Chatbot System
model ChatConversation {
  id            String   @id @default(cuid())
  sessionId     String   @unique
  userEmail     String?
  userName      String?
  userCompany   String?
  userPhone     String?
  leadScore     Int      @default(0)
  status        ChatStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  messages      ChatMessage[]
  
  @@map("chat_conversations")
}

model ChatMessage {
  id             String   @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  metadata       Json?    // Store additional data like lead qualification info
  createdAt      DateTime @default(now())
  
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

model ChatbotConfig {
  id                String   @id @default(cuid())
  name              String   @unique
  welcomeMessage    String
  fallbackMessage   String
  leadQualificationEnabled Boolean @default(true)
  autoResponseEnabled      Boolean @default(true)
  businessHours     Json     // Store business hours configuration
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("chatbot_config")
}

// CRM Integration
model CrmContact {
  id                String   @id @default(cuid())
  hubspotId         String?  @unique
  email             String   @unique
  firstName         String
  lastName          String
  company           String?
  phone             String?
  jobTitle          String?
  leadScore         Int      @default(0)
  lifecycleStage    String?  // subscriber, lead, marketingqualifiedlead, etc.
  leadSource        String?
  lastActivity      DateTime?
  isActive          Boolean  @default(true)
  syncedAt          DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  activities        CrmActivity[]
  
  @@map("crm_contacts")
}

model CrmActivity {
  id           String   @id @default(cuid())
  contactId    String
  type         String   // email, call, meeting, quickscan, etc.
  subject      String
  description  String?
  outcome      String?
  scheduledAt  DateTime?
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  
  contact      CrmContact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  @@map("crm_activities")
}

// Business Intelligence & Analytics
model AnalyticsEvent {
  id           String   @id @default(cuid())
  sessionId    String
  eventType    String   // pageview, click, form_submit, quickscan_start, etc.
  eventData    Json     // Store event-specific data
  userAgent    String?
  ipAddress    String?
  referrer     String?
  page         String?
  userId       String?
  timestamp    DateTime @default(now())
  
  @@map("analytics_events")
}

model ConversionMetrics {
  id                String   @id @default(cuid())
  date              DateTime @unique @db.Date
  pageViews         Int      @default(0)
  uniqueVisitors    Int      @default(0)
  contactForms      Int      @default(0)
  quickScans        Int      @default(0)
  newsletterSignups Int      @default(0)
  consultationBookings Int   @default(0)
  conversionRate    Float    @default(0.0)
  
  @@map("conversion_metrics")
}

// FAQ System
model FaqCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  faqs        Faq[]
  
  @@map("faq_categories")
}

model Faq {
  id          String   @id @default(cuid())
  categoryId  String
  question    String
  answer      String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  category    FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@map("faqs")
}

// Team Management
model TeamMember {
  id          String   @id @default(cuid())
  name        String
  position    String
  bio         String
  imageUrl    String?
  email       String?
  phone       String?
  linkedinUrl String?
  expertise   String[] // Array of expertise areas
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("team_members")
}

// Customer Portal
model Customer {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  company     String
  phone       String?
  hashedPassword String
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  projects    CustomerProject[]
  documents   CustomerDocument[]
  
  @@map("customers")
}

model CustomerProject {
  id          String   @id @default(cuid())
  customerId  String
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  progress    Int      @default(0) // 0-100
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  documents   CustomerDocument[]
  
  @@map("customer_projects")
}

model CustomerDocument {
  id          String   @id @default(cuid())
  customerId  String
  projectId   String?
  title       String
  description String?
  fileName    String
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  isConfidential Boolean @default(false)
  uploadedAt  DateTime @default(now())
  
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  project     CustomerProject? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("customer_documents")
}

enum ChatStatus {
  ACTIVE
  QUALIFIED
  CONVERTED
  ARCHIVED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}
